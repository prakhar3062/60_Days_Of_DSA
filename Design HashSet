// Vector can be used for small range
class MyHashSet {
public:
    vector<int> m;
    MyHashSet() {
        int size=1e6+1;
        m.resize(size);
    }
    
    void add(int key) {
        if(!contains(key))
            m[key]=1;
    }
    
    void remove(int key) {
        if(contains(key))
            m[key]=0;
    }
    
    bool contains(int key) {
        return m[key];
    }
};
//Problem 10^7 is limitation of it
// for larger key chaining
// Hash function handle the collision
// vector of linked list (doubly linked list )
class MyHashSet {
public:
    vector<list<int>> m;
    int size;
    MyHashSet() {
         size=1e6+1;
        m.resize(size);
    }
    int hash(int key){
        return key%size;
    }
    list<int> :: iterator search(int key){
        int i=hash(key);
        return find(m[i].begin(),m[i].end(),key);
    }
    void add(int key) {
        if(contains(key)) return;
            int i=hash(key);
            m[i].push_back(key);
    }
    
    void remove(int key) {
        if(!contains(key)) return;
        int i=hash(key);
        m[i].erase(search(key));
    }
    
    bool contains(int key) {
        int i=hash(key);
         if(search(key)!=m[i].end())
             return true;
        return false;
    }
};
