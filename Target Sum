// complex form of subset Sum difff count=>subset sum
// Recursion can be brute force
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
       int n=nums.size();
        int sum=accumulate(nums.begin(),nums.end(),0);
        if((sum+target)%2!=0) return 0;
        
        int m=(sum+target)/2;
        if(m<0 ) return 0;
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=0;i<n+1;i++)
            dp[i][0]=1;
        for(int i=1;i<n+1;i++){
            for(int j=0;j<m+1;j++){
                if(nums[i-1]>j)
                    dp[i][j]=dp[i-1][j];
                else 
                    dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i-1]];
            }
        }
        return dp[n][m];
    }
    
};
//Reducing it to 1D is another approach and more optimized one
// But here we will try with dfs
class Solution {
public:
        
    int helper(vector<int> &nums, int target, int index, vector<vector<int>> &mem, int currSum, int sum)
    {   
        if(target == currSum and index == nums.size()) return 1;
        if(index == nums.size()) return 0;
        
        if(mem[currSum+sum][index] == -1)
        {
            int subt = helper(nums, target, index+1, mem, currSum-nums[index], sum);
            int add = helper(nums, target, index+1, mem, currSum+nums[index], sum);
            mem[currSum+sum][index] = subt + add;
            return mem[currSum+sum][index];
        }
        else
            return mem[currSum+sum][index];
            
    }
    
    int findTargetSumWays(vector<int>& nums, int target) 
    {
        int sum = 0;
        for(int num: nums) sum += num;
        
        vector<vector<int>> mem(2*sum+1, vector<int>(nums.size()+1, -1));
        return helper(nums, target, 0, mem, 0, sum);
    }
};
